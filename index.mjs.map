{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0RX2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( '0RX8f', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( '0RX8e', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( '0RX35', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport iteratorSymbol from '@stdlib/symbol-iterator' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport validate from './validate.js' ;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Dirac comb.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterDiracComb( opts );\n*\n* var v = iter.next().value;\n* // returns Infinity\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterDiracComb( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t Ïµ [0,T]\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': ( t === 0 ) ? PINF : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDiracComb( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterDiracComb;\n"],"names":["validate","opts","options","isPlainObject","hasOwnProp","period","isPositiveInteger","TypeError","format","offset","isInteger","iter","isNonNegativeInteger","iterDiracComb","FLG","err","t","i","arguments","length","setReadOnly","next","end","iteratorSymbol","factory","done","value","PINF"],"mappings":";;43BAqDA,SAASA,EAAUC,EAAMC,GACxB,OAAMC,EAAeD,GAGhBE,EAAYF,EAAS,YACzBD,EAAKI,OAASH,EAAQG,QAChBC,EAAmBJ,EAAQG,SACzB,IAAIE,UAAWC,EAAQ,QAAS,SAAUN,EAAQG,SAGtDD,EAAYF,EAAS,YACzBD,EAAKQ,OAASP,EAAQO,QAChBC,EAAWR,EAAQO,SACjB,IAAIF,UAAWC,EAAQ,QAAS,SAAUN,EAAQO,SAGtDL,EAAYF,EAAS,UACzBD,EAAKU,KAAOT,EAAQS,MACdC,EAAsBV,EAAQS,OAC5B,IAAIJ,UAAWC,EAAQ,QAAS,OAAQN,EAAQS,OAGlD,KApBC,IAAIJ,UAAWC,EAAQ,QAASN,GAqBzC,CCjBA,SAASW,EAAeX,GACvB,IAAID,EACAU,EACAG,EACAC,EACAC,EACAC,EAOJ,GALAhB,EAAO,CACNI,OAAU,GACVI,OAAU,EACVE,KAAQ,OAEJO,UAAUC,SACdJ,EAAMf,EAAUC,EAAMC,IAErB,MAAMa,EAmBR,OAhBAC,GAAMf,EAAKI,OAAOJ,EAAKQ,QAAWR,EAAKI,QAC9B,IACRW,GAAKf,EAAKI,QAEXW,GAAK,EACLC,EAAI,EAIJG,EADAT,EAAO,CAAA,EACY,OAAQU,GAC3BD,EAAaT,EAAM,SAAUW,GAGxBC,GACJH,EAAaT,EAAMY,EAAgBC,GAE7Bb,EAQP,SAASU,IAER,OADAJ,GAAK,EACAH,GAAOG,EAAIhB,EAAKU,KACb,CACNc,MAAQ,IAGVT,GAAK,EAEE,CACNU,MAAiB,KAFlBV,GAAKf,EAAKI,QAEcsB,EAAO,EAC9BF,MAAQ,GAET,CASD,SAASH,EAAKI,GAEb,OADAZ,GAAM,EACDI,UAAUC,OACP,CACNO,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASD,IACR,OAAOX,EAAeZ,EACtB,CACF"}